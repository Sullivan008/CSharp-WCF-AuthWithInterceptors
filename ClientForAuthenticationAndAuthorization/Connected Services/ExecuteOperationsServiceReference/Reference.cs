//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ServiceModel;

namespace ClientForAuthenticationAndAuthorization.ExecuteOperationsServiceReference
{


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "ExecuteOperationsServiceReference.IExecuteOperationsService")]
    public interface IExecuteOperationsService
    {

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IExecuteOperationsService/MulOperation", ReplyAction = "http://tempuri.org/IExecuteOperationsService/MulOperationResponse")]
        int MulOperation(int multiplier, int multiplicand);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IExecuteOperationsService/MulOperation", ReplyAction = "http://tempuri.org/IExecuteOperationsService/MulOperationResponse")]
        System.Threading.Tasks.Task<int> MulOperationAsync(int multiplier, int multiplicand);

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IExecuteOperationsService/ReadOperation", ReplyAction = "http://tempuri.org/IExecuteOperationsService/ReadOperationResponse")]
        string ReadOperation();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IExecuteOperationsService/ReadOperation", ReplyAction = "http://tempuri.org/IExecuteOperationsService/ReadOperationResponse")]
        System.Threading.Tasks.Task<string> ReadOperationAsync();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IExecuteOperationsService/WriteOperation", ReplyAction = "http://tempuri.org/IExecuteOperationsService/WriteOperationResponse")]
        string WriteOperation();

        [System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IExecuteOperationsService/WriteOperation", ReplyAction = "http://tempuri.org/IExecuteOperationsService/WriteOperationResponse")]
        System.Threading.Tasks.Task<string> WriteOperationAsync();
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExecuteOperationsServiceChannel : ClientForAuthenticationAndAuthorization.ExecuteOperationsServiceReference.IExecuteOperationsService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteOperationsServiceClient : System.ServiceModel.ClientBase<ClientForAuthenticationAndAuthorization.ExecuteOperationsServiceReference.IExecuteOperationsService>, ClientForAuthenticationAndAuthorization.ExecuteOperationsServiceReference.IExecuteOperationsService, IDisposable
    {

        public ExecuteOperationsServiceClient()
        {
        }

        public ExecuteOperationsServiceClient(string endpointConfigurationName) :
                base(endpointConfigurationName)
        {
        }

        public ExecuteOperationsServiceClient(string endpointConfigurationName, string remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public ExecuteOperationsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
                base(endpointConfigurationName, remoteAddress)
        {
        }

        public ExecuteOperationsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
                base(binding, remoteAddress)
        {
        }

        public int MulOperation(int multiplier, int multiplicand)
        {
            return base.Channel.MulOperation(multiplier, multiplicand);
        }

        public System.Threading.Tasks.Task<int> MulOperationAsync(int multiplier, int multiplicand)
        {
            return base.Channel.MulOperationAsync(multiplier, multiplicand);
        }

        public string ReadOperation()
        {
            return base.Channel.ReadOperation();
        }

        public System.Threading.Tasks.Task<string> ReadOperationAsync()
        {
            return base.Channel.ReadOperationAsync();
        }

        public string WriteOperation()
        {
            return base.Channel.WriteOperation();
        }

        public System.Threading.Tasks.Task<string> WriteOperationAsync()
        {
            return base.Channel.WriteOperationAsync();
        }

        void IDisposable.Dispose()
        {
            Dispose(true);
        }

        public void Dispose(bool disposing)
        {
            if (disposing)
            {
                try
                {
                    if (State != CommunicationState.Faulted)
                    {
                        Close();
                    }
                }
                finally
                {
                    if (State != CommunicationState.Closed)
                    {
                        Abort();
                    }
                }
            }
        }

        ~ExecuteOperationsServiceClient()
        {
            Dispose(false);
        }
    }
}
